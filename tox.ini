# Remember to start celery workers to run celery tests, e.g.
# celery --app=rabbitai.tasks.celery_app:app worker -Ofair -c 2
[testenv]
basepython = python3.8
ignore_basepython_conflict = true
commands =
    rabbitai db upgrade
    rabbitai init
    # use -s to be able to use break pointers.
    # no args or tests/* can be passed as an argument to run all tests
    pytest -s {posargs}
deps =
    -rrequirements/testing.txt
setenv =
    PYTHONPATH = {toxinidir}
    RABBITAI_TESTENV = true
    RABBITAI_CONFIG = tests.integration_tests.rabbitai_test_config
    RABBITAI_HOME = {envtmpdir}
    mysql: RABBITAI__SQLALCHEMY_DATABASE_URI = mysql://mysqluser:mysqluserpassword@localhost/rabbitai?charset=utf8
    postgres: RABBITAI__SQLALCHEMY_DATABASE_URI = postgresql+psycopg2://rabbitai:rabbitai@localhost/rabbitai_db
    sqlite: RABBITAI__SQLALCHEMY_DATABASE_URI = sqlite:////{envtmpdir}/rabbitai.db
    mysql-presto: RABBITAI__SQLALCHEMY_DATABASE_URI = mysql://mysqluser:mysqluserpassword@localhost/rabbitai?charset=utf8
    # docker run -p 8080:8080 --name presto prestosql/presto
    mysql-presto: RABBITAI__SQLALCHEMY_EXAMPLES_URI = presto://localhost:8080/memory/default
    # based on https://github.com/big-data-europe/docker-hadoop
    # clone the repo & run docker-compose up -d to test locally
    mysql-hive: RABBITAI__SQLALCHEMY_DATABASE_URI = mysql://mysqluser:mysqluserpassword@localhost/rabbitai?charset=utf8
    mysql-hive: RABBITAI__SQLALCHEMY_EXAMPLES_URI = hive://localhost:10000/default
    # make sure that directory is accessible by docker
    hive: UPLOAD_FOLDER = /tmp/.rabbitai/app/static/uploads/
usedevelop = true
allowlist_externals =
    npm
    pkill

[testenv:cypress]
setenv =
    PYTHONPATH = {toxinidir}
    RABBITAI_TESTENV = true
    RABBITAI_CONFIG = tests.integration_tests.rabbitai_test_config
    RABBITAI_HOME = {envtmpdir}
    ENABLE_REACT_CRUD_VIEWS = true
commands =
    npm install -g npm@'>=6.5.0'
    pip install -e {toxinidir}/
    {toxinidir}/rabbitai-frontend/cypress_build.sh
commands_post =
    pkill -if "python {envbindir}/flask"

[testenv:cypress-dashboard]
setenv =
    PYTHONPATH = {toxinidir}
    RABBITAI_TESTENV = true
    RABBITAI_CONFIG = tests.integration_tests.rabbitai_test_config
    RABBITAI_HOME = {envtmpdir}
    ENABLE_REACT_CRUD_VIEWS = true
commands =
    npm install -g npm@'>=6.5.0'
    pip install -e {toxinidir}/
    {toxinidir}/rabbitai-frontend/cypress_build.sh dashboard
commands_post =
    pkill -if "python {envbindir}/flask"

[testenv:cypress-explore]
setenv =
    PYTHONPATH = {toxinidir}
    RABBITAI_TESTENV = true
    RABBITAI_CONFIG = tests.integration_tests.rabbitai_test_config
    RABBITAI_HOME = {envtmpdir}
    ENABLE_REACT_CRUD_VIEWS = true
commands =
    npm install -g npm@'>=6.5.0'
    pip install -e {toxinidir}/
    {toxinidir}/rabbitai-frontend/cypress_build.sh explore
commands_post =
    pkill -if "python {envbindir}/flask"

[testenv:cypress-sqllab]
setenv =
    PYTHONPATH = {toxinidir}
    RABBITAI_TESTENV = true
    RABBITAI_CONFIG = tests.integration_tests.rabbitai_test_config
    RABBITAI_HOME = {envtmpdir}
    ENABLE_REACT_CRUD_VIEWS = true
commands =
    npm install -g npm@'>=6.5.0'
    pip install -e {toxinidir}/
    {toxinidir}/rabbitai-frontend/cypress_build.sh sqllab
commands_post =
    pkill -if "python {envbindir}/flask"

[testenv:cypress-sqllab-backend-persist]
setenv =
    PYTHONPATH = {toxinidir}
    RABBITAI_TESTENV = true
    RABBITAI_CONFIG = tests.integration_tests.rabbitai_test_config
    RABBITAI_HOME = {envtmpdir}
    ENABLE_REACT_CRUD_VIEWS = true
commands =
    npm install -g npm@'>=6.5.0'
    pip install -e {toxinidir}/
    {toxinidir}/rabbitai-frontend/cypress_build.sh sqllab
commands_post =
    pkill -if "python {envbindir}/flask"

[testenv:eslint]
changedir = {toxinidir}/rabbitai-frontend
commands =
    npm run lint
deps =

[testenv:fossa]
commands =
    {toxinidir}/scripts/fossa.sh
deps =
passenv = *

[testenv:javascript]
commands =
    npm install -g npm@'>=6.5.0'
    {toxinidir}/rabbitai-frontend/js_build.sh
deps =

[testenv:license-check]
commands =
    {toxinidir}/scripts/check_license.sh
passenv = *
whitelist_externals =
    {toxinidir}/scripts/check_license.sh
deps =

[testenv:pre-commit]
commands =
    pre-commit run --all-files
deps =
    -rrequirements/integration.txt
skip_install = true

[testenv:pylint]
commands =
    pylint rabbitai
deps =
    -rrequirements/testing.txt

[testenv:thumbnails]
setenv =
    RABBITAI_CONFIG = tests.integration_tests.rabbitai_test_config_thumbnails
deps =
    -rrequirements/testing.txt

[tox]
envlist =
    cypress-dashboard
    cypress-explore
    cypress-sqllab
    cypress-sqllab-backend-persist
    eslint
    fossa
    javascript
    license-check
    pre-commit
    pylint
skipsdist = true
